#+TITLE: DotEmacs
#+AUTHOR: Danijel Camdzic

This repository contains my personal Emacs configuration. This configuration is
intended to work on both Android port of Emacs and Linux Emacs. The
installation process and the explanation of some of the more exciting features
which I use in my workflow are presented in this README file.

* Installation

You can use this configuration on both Android and Linux/Windows without any
modifications except for the user credentials and folder names.

** Installation on Android

To install GUI Emacs port on Android, follow the tutorial on
https://sourceforge.net/projects/android-ports-for-gnu-emacs/. You will need to
download their signed version of =Termux= as well as download their Emacs =.apk=
file. Once you have everything set up according to the tutorial, you can open
the Emacs folder on your Android device using any file manager you have
available and you can delete the =.emacs= file which the program created. If you
followed the tutorial you will have created the =early-init.el= file and placed it
inside the =.emacs.d= folder. This file is necessary in order for Emacs to use
Termux packages (like =git=, =gpg= etc.). If you haven't created this file you can
find it in this repo and use it.

From here:

1. Clone the repository in your desired directory.

   #+begin_src bash
   git clone https://github.com/danijelcamdzic/dotemacs
   #+end_src

   I cloned it in my =~/Projects/= folder and it's best to use that one if you do
   not want to change the directory in the =init.el= file.

2. Move the =early-init.el= file to your Android Emacs =.emacs.d= folder if you
   didn't create one during the installation tutorial

3. Create a new =init.el= file and place the following code in it.

  #+begin_src emacs-lisp
  ;; Determine the location of init.el based on the system type
  (setq init-file-location
        (cond
         ((eq system-type 'gnu/linux) "~/Projects/dotemacs/init.el")
         ((eq system-type 'android) "/storage/emulated/0/Projects/dotemacs/init.el")
         (t "~/Projects/dotemacs/init.el")))

  ;; Load the init.el file from the determined location
  (when init-file-location
    (load-file init-file-location))
  #+end_src

   This will make sure that when Emacs has started, it will load the correct
   =init.el= file depending on the system. This way you can have the same
   configuration files on both Android and Linux/Windows without manual changes anytime
   you change something in your repo.

4. Start Emacs and wait for all the packages to be downloaded.

** Installation on Linux

To install Emacs on Linux, the process is much more straightforward.

1. Download Emacs (Vanilla one, not Doom or Spacemacs) on your machine depending on your operating system.
2. Delete (if created) the =.emacs= file
3. Create the =init.el= file and move it in the =.emacs.d= folder. The =init.el= file
   is the same as in the Android case.

Note that =early-init.el= is not necessary for Linux cases.

* Syncing

I use the https://syncthing.net/ app to sync folders from my home directory. It is a simple
and a powerful app available on both Android and Linux/Windows. I use it
primarely to sync my =~/Notes/= and my =~/Documents/= folder.

* My init.el

I have decided to use one large =init.el= file. There are options to split this
file into smaller =.el= files and manage the configuration that way but I find
it cumbersome to find stuff that way. I also don't like literate configs because
I don't think an org file is meant to store configuration but instead take notes
on stuff.

I use =use-package= to pack my config and =outline-minor-mode= and
=outline-minor-faces= to view it.

Here I will elaborate on my =init.el= file and present some
interesting (to me at least) features I have added to my workflow in order to
make it more useful.

[[assets/linux-emacs.png]]
[[assets/android-emacs.png]]

** User

This section contains the user information which includes the user credentials and
directory information.

I use the same folder names on my Linux machine and on my Android phone. The only
thing that is different is the home folder. In this configuration section, Emacs is
let known what the user home folder is and what are the names of the folders it
uses.

For Linux both =~/= and =/home/user= are used but for Android we use
=/storage/emulated/0= (unrooted phone)

Here you can add more of your information.

** Editor

This section contains various editor related configurations, ranging from the theme
set up to the sidebar configuration.

I use =dired-sidebar= and =ibuffer-sidebar= and have created wrapper functions which
I use to seamlessly transition to using them.

*** Android editor

The most important part of this configuration section is the following:

#+begin_src emacs-lisp
;; Android specific settings
(when (eq system-type 'android)
  ;; Buffer display settings
  (setq display-buffer-alist
        '((".*" (display-buffer-same-window) (inhibit-same-window . nil))))
  ;; Touchscreen keyboard spawn
  (setq touch-screen-display-keyboard t))
#+end_src

Which makes every buffer open in its own separate window as the screen size of
Android is not meant to be shared between buffers due to its size. Also, I
enable the keyboard to display even on read-only buffers.

** Dashboard

*UPDATE* 2024-01-16 Tue 15:11 I no longer use the =dashboard= package but all
the functions and configuration are available from this commit:
https://github.com/danijelcamdzic/dotemacs/tree/4410ef98602937a285ddae8ec2abbdd8cbdbc27b

This section contains the configuration for that
package as well as some custom functions which improve how the dashboard
looks. This is mainly related to how the agenda items appear in the dashboard.

*** Relative vs absolute dates in dashboard-agenda

In the original version, the agenda items would appear and be shown with their
scheduled dates. I didn't like seeing the dates as they are, and preffered to see
them written in a more personal manner by using the relative date terms like
today, tomorrow and yesterday as opposed to absolute dates.

[[assets/dashboard-absolute-date.png]]
[[assets/dashboard-relative-date.png]]

This functionality is added as an advice and can be removed with only one line
if you don't find this useful.

** GUI

*Update*: 2024-01-15 Mon 15:18 I have removed most of GUI options from my workflow
in order to change some stuff out. The last commit that had all of it in there
is
https://github.com/danijelcamdzic/dotemacs/tree/041706b0172ab30b5e18f31eac3d48b125fb4fc9
so check that one out if you want to see GUI elements in Android and Linux.

In this section, I configure the GUI options in Emacs. I need GUI because I don't
like using the keyboard shortcuts on Android Emacs and would like all options to be
available through the GUI menu.

For Linux/Windows I do not like seeing the GUI and so I automatically hide
it. You can remove the line which calls the =dc/gui-hide-bars= function if you don't
want this.

*** Android GUI shortcuts

In Android case, I like to see some options appear in the tool-bar menu and
those include the =zoom-in=, =zoom-out=, =org-cycle= and =org-ctrl-c-ctrl-c=
options. They are cumbersome to search for otherwise.

In the GUI menu bar, I add a bunch of features I have created all over my
configuration for easy access. Some of then are in the ="Commands"= menu and some
are in the ="Tools"= menu.

** MPV

I use [[https://mpv.io/][mpv]] player on both Linux and Android.

*** Linux installation

To install it on Linux, it is pretty straightforward, you just install it with
your package manager. Here is an example using Arch Linux:

#+begin_src bash
pacman -S mpv
#+end_src

If you wish and are allowed to do so, you can install an additional package called
[[https://github.com/yt-dlp/yt-dlp][yt-dlp]] which would enable you to play remote media. I am not encouraging its
use, but simply making you aware that this package exists and serves that
purpose :).

You can use this package even without Emacs, as it is simply a very powerful media player.

*** Android installation

The installation process on Android involves installing an app called
[[https://github.com/mpv-android/mpv-android][mpv-android]]. The Github repository offers the '.apk' file in the releases.

If you wish and are allowed to do so, you can install a version of the app with
'yt-dlp' by visiting [[https://github.com/mpv-android/mpv-android/pull/58][this]] pull request which would enable you to play
remote media. Again, I am not encouraging its use, but simply making you aware that
this version of the app exists and serves that purpose :).

You can use this app even without Emacs, as it is simply a very powerful media player.

*** Usage

Now that you have installed Linux and Android MPV clients, you can integrate
them into your Emacs and use them.

There is an emacs package called [[https://github.com/kljohann/mpv.el][mpv.el]] which utilizes MPV and lets you play
local and remote media using MPV.

**** Usage on Linux

If you are using Linux, than there is no other configuratio necessary. You can
use commands:

#+begin_src text
mpv-play
mpv-play-url
#+end_src

and they work without problems.

**** Usage on Android

Android in my case had a problem of playing a media through MPV using the above
methods. I got errors saying:

#+begin_src text
"Failed to connect to mpv"
#+end_src

Since I have mpv-android installed, I could use Termux and Emacs to communicate
together and send commands to the mpv-android app and let it play media.

To do this, it is necessary to advise the `mpv-play` command from Emacs in order
to use a different set of commands when requesting to play media on
mpv-android as opposed to a regular mpv package from Linux.

The code which does this is given below:

#+begin_src emacs-lisp
;; This should only be done on Android
(when (eq system-type 'android)
  (defun dc/mpv-start--android-advice (orig-fun &rest args)
    "Advice to use a different mpv command on Android. Android uses
Termux package called mpv-android and Emacs should pass appropriate
commands to it.

This is an example of a full command passed down to mpv-android:

am start -a android.intent.action.VIEW -t video/* -d file:///storage/emulated/0/Download/why_i_like_cats.mp4 --ei position 30000 -p is.xyz.mpv
"
    (let* ((media-path (car args))
           (start-time (if (> (length args) 1) (nth 1 args) 0))
           (start-time-ms (when (stringp start-time)
                            (* (string-to-number (replace-regexp-in-string "\\`--start=\\+" "" start-time)) 1000)))
           (is-remote (or (string-prefix-p "http://" media-path)
                          (string-prefix-p "https://" media-path)))
           (mpv-command (format "am start -a android.intent.action.VIEW -t video/* %s%s"
                                (if is-remote "-d " "-d file:///")
                                media-path)))
      (when start-time-ms
        (setq mpv-command (format "%s --ei position %d" mpv-command start-time-ms)))
      (setq mpv-command (format "%s -p is.xyz.mpv" mpv-command))
      (start-process "mpv-android" nil "sh" "-c" mpv-command)))

  ;; Add advice to mpv-start so it open the correct player each time
  (advice-add 'mpv-start :around #'dc/mpv-start--android-advice))
#+end_src

With this configuration in your init.el file, you can now use the commands:

#+begin_src text
mpv-play
mpv-play-url
#+end_src

without problems as you did on Linux. This config works on both Linux and
Android and you system will recognize which commands it needs to call in each
case.

Here is an example of me using Emacs on Android to play a video through the
mpv-android app on my phone:

[[assets/mpv-android.gif]]

** Org-mode

This is the biggest part of my configuration and contains numerous functions.

In this section, the main parts of the configuration concern the general =org-mode=,
=org-roam= and =org-agenda= functionalities.

I will showcase a few here.

*** Calendar display of states and notes

I wanted to have a way to visualize how my =TODO= (or any heading) changed
throughout its existance. I want to see when I marked it as =DONE=, when as =FAIL=
and when I was =DOING= it. I wanted to see this visually on my calendar.

For this I created several functions which serve the purpose to parse the
logbook and display a =TODO='s history.

The TODO keywords are defined as this:

#+begin_src emacs-lisp
;; Set the org-todo-keywords and their states
(setq org-todo-keywords
   '((sequence "TODO(t)" "DOING(i!)" "|" "DONE(d!)" "SKIP(s!)" "FAIL(f!)")))
#+end_src

and their respective colors as this:

#+begin_src emacs-lisp
;; Define custom faces for different TODO states
(defface my-mark-DONE '((t :background "#006400")) "") ; green
(defface my-mark-SKIP '((t :background "#999900")) "") ; yellow
(defface my-mark-FAIL '((t :background "#8B0000")) "") ; red
(defface my-mark-DOING '((t :background "#4B0082")) "") ; purple
(defface my-mark-NOTE '((t :background "#006400")) "") ; green (separate calendar)
#+end_src

To visualize the states on the calendar one must simply call the function
=dc/org-logbook-display-states-on-calendar=. It can be used to visualize both
habit like =TODOs= as well as =TODOs= which are supposed to be done over a
longer period of time.

[[assets/todo-algorithms.png]]
[[assets/calendar-algorithms.png]]
[[assets/todo-gym.png]]
[[assets/calendar-gym.png]]

In the same manner, you can call the =dc/org-logbook-display-notes-on-calendar= and you will see
with green dates all the dates that you have made a note in.

You can even go to the place where the =STATE= or =NOTE= was added by clicking on
the calendar date.

*** Org-roam nodes with tag insertion

There is a function called =dc/org-roam-insert-nodes-by-tags=, which enables you to
insert in the org file all nodes that have certain tags but do not have other
tags you specify.

In the example below, I have called the function to insert all the nodes that
have tag =fitness= in them and in the example below that one I inserted all that have the
tag =fitness= but do not have the tag =cardio=.

[[assets/insert-fitness.png]]
[[assets/insert-fitness-no-cardio.png]]

There are also in here many functions which serve as a wrapper so they can be
called in either the =org-agenda= buffer or the =org= file.

*** Org-alert notifications on both Android and Linux

I use =org-alert= package for notifications. My usual configuration is rather
simple:

#+begin_src emacs-lisp
(use-package org-alert
  :ensure t
  :after org
  :custom
  ;; Use different backends depending on the platform
  (alert-default-style (if (eq system-type 'android)
                           'android-notifications
                         'libnotify))
  :config
  ;; Setup timing
  (setq org-alert-interval 300
        org-alert-notify-cutoff 10
        org-alert-notify-after-event-cutoff 10)
  
  ;; Setup notification title (if using 'custom)
  (setq org-alert-notification-title "Org Alert Reminder")
  
  ;; Use non-greedy regular expression
  (setq org-alert-time-match-string
        "\\(?:SCHEDULED\\|DEADLINE\\):.*?<.*?\\([0-9]\\{2\\}:[0-9]\\{2\\}\\).*>")
  
  ;; Enable org-alert
  (org-alert-enable)
  )
#+end_src

But since I use Emacs on my Android as well I needed to have notifications on
Android too. I found it cumbersome to install =termux-notifications= since I
would need to sign and repackage the =apk= for =Termux API= so I decided to look
around and found a neat way to send notifications to Android using
=android-notifications-notify=.

To have this implemented seamlessly, I have expanded the =alert.el= package by
adding another option to it, =android-notifications=. Now my config looks like
this:

#+begin_src emacs-lisp
(require 'alert)

(defun dc/alert-android-notifications-notify (info)
  "Send notifications using `android-notifications-notify'.
`android-notifications-notify' is a built-in function in the native Emacs
Android port."
  (let ((title (or (plist-get info :title) "Android Notifications Alert"))
        (body (or (plist-get info :message) ""))
        (urgency (cdr (assq (plist-get info :severity)
                            alert-notifications-priorities)))
        (icon (or (plist-get info :icon) alert-default-icon))
        (replaces-id (gethash (plist-get info :id) alert-notifications-ids)))
    (android-notifications-notify
     :title title
     :body body
     :urgency urgency
     :icon icon
     :replaces-id replaces-id)))

(alert-define-style 'android-notifications :title "Android Notifications"
                    :notifier #'dc/alert-android-notifications-notify)
#+end_src

Whether on Android or Linux, I will now get my notifications using the same
packages =org-alert= and =alert= and the backend will change depending on my
running system.

Here is an example of how it will look like on Android:

[[assets/android-org-alert.png]]

*** Org-alert notification titles

I really like how =org-super-agenda= package is able to group TODOs together
based on the =auto-parent= property. This groups the TODOs based on their
immediate parent heading. Just a sidenote, I have expanded on this in my
configuration so the file title is taken if the TODO is the first-level heading.

The =org-alert= package allows for the creation of custom titles to be sent in
notifications. This means you can define your own titles and have them appear
instead of the default one. The default one is "*org*".

Here is an example of how it looks configured with the custom title "Org Alert
Reminder":

#+begin_src emacs-lisp
(use-package org-alert
  :ensure t
  :after org
  :custom
  ;; Use different backends depending on the platform
  (alert-default-style (if (eq system-type 'android)
                           'android-notifications
                         'libnotify))
  :config
  ;; Setup timing
  (setq org-alert-interval 300
        org-alert-notify-cutoff 10
        org-alert-notify-after-event-cutoff 10)
  
  ;; Setup notification title (if using 'custom)
  (setq org-alert-notification-title "Org Alert Reminder")
  
  ;; Use non-greedy regular expression
  (setq org-alert-time-match-string
        "\\(?:SCHEDULED\\|DEADLINE\\):.*?<.*?\\([0-9]\\{2\\}:[0-9]\\{2\\}\\).*>")
  
  ;; Enable org-alert
  (org-alert-enable)
  )
#+end_src

[[assets/org-alert-title-default.gif]]

You can see the title appear in the notification.

I wanted to create something which will give me =org-super-agenda= powers and
allow me to have different titles based on the parents of my TODO which I am
getting notified about.

I have created an example TODO which you can see on the image above. It is a
subheading to the "Rome" heading and with the custom configuration I creates we
should be able to see the notification title as "Rome" now.

The important bit of the configuration is this:

#+begin_src emacs-lisp
(defvar my-org-alert-title-type 'custom
  "Control the title type for `org-alert' notifications.
   Possible values are:
      - 'custom: The usual workings of org-alert package. Uses `org-alert-notification-title'
                 as the title of notifications sent.
      - 'parent: Uses the immediate parent heading of the TODO as the title of the notification.
                 If the TODO does not have a parent, it uses the file title instead. If the file
                 does not have a title, it uses the filename as the title for notifications.")
#+end_src

and by changing that to either ='custom= or ='function= you are able to change
the notification title type.

#+begin_src emacs-lisp
(setq my-org-alert-title-type 'parent)
;; Update to set up or remove advices based on my-org-alert-title-type
(dc/org-alert-update-advices)
#+end_src

We have now set the parent mode and we can see the result:

[[assets/org-alert-title-heading.gif]]

And when there is no parent heading we can see the filename as the title:

[[assets/org-alert-title-file.gif]]

And this works on Android btw! Without any changes from your side, it will
detect that you are running Android and give you the notification!

[[assets/org-alert-title-android.png]]
** Bookmarks

*** Seamless bookmark management on Android and Linux

This section contains bookmark related configuration. I use =bookmark+= package and have a
unified bookmark file which works on both Linux and Android. To be able to work
on both Linux and Android I have created custom function which advises the
=bookmark-jump= function to manipulate the bookmark entry and go to the proper
home directory depending on the system

This way syncthing app can be used to sync the bookmark file and the bookmarks
will be opened seamlessly on both types of systems.

** TOTP and password manager

This section contains two package configurations which include =auth-sources= and
=epa=.

I use GPG for encrypting my files and I use =auth-sources= on Emacs to store my
secrets. This is convenient for me as I have my phone and Linux both running the
same configuration and both synced to have the latest files. I use Emacs as my
password manager and I use Emacs as my TOTP manager.

This section contains functions for TOTP and password retrieval. TOTP functions are
taken from the https://github.com/juergenhoetzel/emacs-totp and I followed the
https://www.masteringemacs.org/article/securely-generating-totp-tokens-emacs
tutorial to make this work.

